#!/usr/bin/env python3
"""
Script to create and set up the request_logs table in Supabase.

This script creates the request_logs table in Supabase for token usage tracking
and sets up the appropriate RLS policies.
"""

import logging
import os
import sys
from typing import Optional

import dotenv
from supabase import create_client

# Set up logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# SQL to create the request_logs table
CREATE_REQUEST_LOGS_SQL = """
CREATE TABLE IF NOT EXISTS public.request_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITH TIME ZONE NULL DEFAULT NOW(),
    model TEXT NULL DEFAULT ''::TEXT,
    messages JSONB NULL DEFAULT '{}'::JSONB,
    response JSONB NULL DEFAULT '{}'::JSONB,
    end_user TEXT NULL DEFAULT ''::TEXT,
    status TEXT NULL DEFAULT ''::TEXT,
    error JSONB NULL DEFAULT '{}'::JSONB,
    response_time REAL NULL DEFAULT '0'::REAL,
    total_cost REAL NULL,
    additional_details JSONB NULL DEFAULT '{}'::JSONB,
    litellm_call_id TEXT UNIQUE,
    PRIMARY KEY (id)
);

-- Enable RLS on request_logs table
ALTER TABLE public.request_logs ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid duplicates
DROP POLICY IF EXISTS "Allow authenticated users to insert request logs" ON public.request_logs;
DROP POLICY IF EXISTS "Allow users to view their own request logs" ON public.request_logs;
DROP POLICY IF EXISTS "Allow service role to view all request logs" ON public.request_logs;

-- Create policy for inserting logs (authenticated users)
CREATE POLICY "Allow authenticated users to insert request logs"
ON public.request_logs
FOR INSERT
TO authenticated
WITH CHECK (true);

-- Create policy for selecting logs (users can see their own logs)
CREATE POLICY "Allow users to view their own request logs"
ON public.request_logs
FOR SELECT
TO authenticated
USING (end_user = auth.uid());

-- Create policy for service role (can see all logs)
CREATE POLICY "Allow service role to view all request logs"
ON public.request_logs
FOR ALL
TO service_role
USING (true);
"""


def connect_to_supabase() -> Optional[object]:
    """Connect to Supabase using environment variables."""
    try:
        # Load environment variables
        dotenv.load_dotenv()

        # Get Supabase credentials
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_KEY", os.getenv("SUPABASE_KEY"))

        if not supabase_url or not supabase_key:
            logger.error("Missing Supabase credentials in environment variables")
            return None

        # Create Supabase client
        return create_client(supabase_url, supabase_key)
    except Exception as e:
        logger.error(f"Error connecting to Supabase: {e}")
        return None


def check_table_exists(supabase, table_name: str) -> bool:
    """Check if a table exists in the database."""
    try:
        # Query the information_schema to check if the table exists
        response = (
            supabase.table("information_schema.tables")
            .select("table_name")
            .eq("table_schema", "public")
            .eq("table_name", table_name)
            .execute()
        )

        exists = len(response.data) > 0
        logger.info(f"Table '{table_name}' exists: {exists}")
        return exists
    except Exception as e:
        logger.error(f"Error checking if table '{table_name}' exists: {e}")
        return False


def setup_request_logs(supabase) -> bool:
    """Create and set up the request_logs table."""
    try:
        # First check if the table exists
        if check_table_exists(supabase, "request_logs"):
            logger.info("request_logs table already exists. Updating RLS policies...")
        else:
            logger.info("Creating request_logs table and setting up RLS policies...")

        # Execute the SQL
        supabase.sql(CREATE_REQUEST_LOGS_SQL).execute()

        # Verify the table was created
        if not check_table_exists(supabase, "request_logs"):
            logger.error("Failed to create request_logs table")
            return False

        logger.info("Successfully set up request_logs table and RLS policies")
        return True
    except Exception as e:
        logger.error(f"Error during setup: {e}")
        return False


if __name__ == "__main__":
    # Connect to Supabase
    logger.info("Connecting to Supabase...")
    supabase = connect_to_supabase()

    if not supabase:
        logger.error("Failed to connect to Supabase. Exiting.")
        sys.exit(1)

    # Run the setup
    logger.info("Starting request_logs table setup...")
    success = setup_request_logs(supabase)

    if success:
        logger.info("Setup completed successfully")
        sys.exit(0)
    else:
        logger.error("Setup failed")
        sys.exit(1)
